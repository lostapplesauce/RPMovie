using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;
using RazorPagesMovie.Data;
using RazorPagesMovie.Models;

namespace RazorPagesMovie.Pages.Movies
{
    public class IndexModel : PageModel
    {
        private readonly RazorPagesMovie.Data.RazorPagesMovieContext _context;

        public IndexModel(RazorPagesMovie.Data.RazorPagesMovieContext context)
        {
            _context = context;
        }

        public IList<Movie> Movie { get;set; } = default!;

        [BindProperty(SupportsGet = true)] //BindProperty binds from values and query strings with the same name as the property
                                           //SupportGet = true is required for binding HTTP GET requests
        public string? SearchString { get; set; } //Contains the text users enter in the search text box
        public SelectList? Genres { get; set; } //Contains list of Genres. Genres(the variable) allows user to select genre from the list
        [BindProperty(SupportsGet = true)]
        public string? MovieGenre { get; set; } //Contains the specific genre the user selects. For example "Western"

        public async Task OnGetAsync()
        {
            IQueryable<string> genreQuery = from m in _context.Movie  //LINQ query that retrieves all the genres from the database
                                            orderby m.Genre
                                            select m.Genre;

            var movies = from m in _context.Movie
                         select m;

            if (!string.IsNullOrEmpty(SearchString))
            {
                movies = movies.Where(s => s.Title.Contains(SearchString));
            }

            if(!string.IsNullOrEmpty(MovieGenre))
            {
                movies = movies.Where(x => x.Genre == MovieGenre);
            }
            Genres = new SelectList(await genreQuery.Distinct().ToListAsync()); //SelectList of genres is generated by projecting the distinct genres
            Movie = await movies.ToListAsync();
        }
    }
}
